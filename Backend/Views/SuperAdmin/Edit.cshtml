@model Backend.Models.UserProfile
@{
    ViewBag.Title = "Edit User";
}
@section css {
    <style>
        #editUser {
            margin-bottom: 20px;
            margin-top: 20px;
        }

            #editUser .row {
                margin-bottom: 10px;
            }

        .form-group input.form-control {
            padding: .375rem .75rem;
        }

        form-group select.form-select {
            width: 100%;
            padding: .375rem 2.25rem .375rem .75rem;
        }

        /*#addUser span.select2.select2-container.select2-container--default.select2-container--below span {
            padding: 2px 8px 0;
            height: 36px;
        }*/



        span.select2.select2-container.select2-container--default {
            border-radius: 4px;
            border-color: #eaeaea;
            background-color: #fcfcfc;
            border: 1px solid #ccc;
            height: 36px;
            width: 100% !important;
        }

        .select2-container .select2-selection--single {
            height: 100%;
            border: none !important;
        }

        span.selection {
            height: 100%;
            display: block;
        }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 35px;
        }

        .select2-container--default .select2-selection--single .select2-selection__arrow {
            height: 35px;
        }

        .select2-container--default .select2-selection--single {
            background-color: #fcfcfc;
        }

        .btnGenerate {
            display: flex;
            align-items: center;
            justify-content: left;
        }

            .btnGenerate a#GeneratePassword {
                margin: 0;
                border-radius: 0 25px 25px 0;
                height: 35px;
                background: #0f831d;
                color: #FFF;
                border: 0;
                line-height: 25px;
                font-weight: bold;
                padding: 4px 15px 0 10px;
                font-size: 13px;
                letter-spacing: 0.5px;
                /* text-transform: uppercase; */
            }

            .btnGenerate input.form-control {
                border-radius: 4px 0 0 4px;
            }

        input.btn-creat {
            float: right;
        }
    </style>
}
<div class="container">
    <div class="pagetitle">
        <h1>@ViewBag.Title</h1>
        <nav>
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="index.html">Home</a></li>
                <li class="breadcrumb-item active">@ViewBag.Title</li>
            </ol>
        </nav>
    </div><!-- End Page Title -->
    <section class="section">
        <div class="row card">
            @using (Html.BeginForm("EditUser", "SuperAdmin", new { uID = Request.QueryString["uID"] }, FormMethod.Post, new { id = "editUser" }))
            {
                @*<form id="form-edit-user">*@
                @*@Html.Hidden("uID", Request.QueryString["uID"])
                    @Html.HiddenFor(model => model.UserId)*@

                @Html.AntiForgeryToken()
                @Html.Hidden("uID", Request.QueryString["uID"])
                @Html.HiddenFor(model => model.UserId)
                <div class="row">
                    <div class="col-lg-4">
                        <label class="form-label">Personal Number/User Code</label>
                        <div class="form-group">
                            @Html.EditorFor(model => model.UserCode, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               minlength = "4",
                               maxlength = "7",
                               required = "required",
                               placeholder = "Personal Number",
                               data_parsley_required_message = "Please Enter Personal Number",
                               data_parsley_length = "[6, 6]"
                           }
                       })
                            <div class="help-block"></div>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <label class="form-label">Name</label>
                        <div class="form-group">
                            @Html.EditorFor(model => model.Name, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               required = "required",
                               placeholder = "Name",
                               data_parsley_required_message = "Please Enter User Name",
                           }
                       })
                            <div class="help-block"></div>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <label class="form-label">Email</label>
                        <div class="form-group">
                            @Html.EditorFor(model => model.Email, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               required = "required",
                               data_parsley_pattern = "[a-zA-Z0-9._&]+@[a-zA-Z0-9._-]+\\.+[a-z._-]+",
                               data_parsley_pattern_message = "Please Enter Valid Email Address",
                               data_parsley_required_message = "Please Enter Email Address",
                               data_parsley_type = "email",
                               placeholder = "Email",
                               data_parsley_type_message = "Please Enter Valid Email Address"
                           }
                       })
                            <div class="help-block"></div>
                        </div>
                    </div>

                </div>
                <div class="row">
                    <div class="col-lg-4">
                        <label class="form-label">Mobile</label>
                        <div class="form-group">
                            @Html.EditorFor(model => model.Mobile, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_parsley_pattern = "^\\d{10}$",
                               placeholder = "Mobile",
                               data_parsley_pattern_message = "Please Enter Valid Mobile No",
                           }
                       })
                            <div class="help-block"></div>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <label class="form-label">Role</label>
                        <div class="form-group">
                            @Html.DropDownListFor(model => model.Role, (IEnumerable<SelectListItem>)ViewData["ROLEselectListItems"], new { @class = "form-select ddlRole", required = "required", data_parsley_required_message = "Please Select Role", data_parsley_errors_container = "#roleHelpBlock" })
                            <div id="roleHelpBlock" class="help-block"></div>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <label class="form-label">Username</label>
                        <div class="form-group">
                            @Html.EditorFor(model => model.Username, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               minlength = "4",
                               maxlength = "7",
                               required = "required",
                               placeholder = "Personal Number",
                               data_parsley_required_message = "Please Enter Username",
                               data_parsley_length = "[6, 6]"
                           }
                       })
                            <div class="help-block"></div>
                        </div>
                    </div>
                    @*<div class="col-lg-4">
                            <label>Department</label>
                            <div class="form-group">
                                @Html.DropDownListFor(model => model.Department, (IEnumerable<SelectListItem>)ViewData["DEPTselectListItems"], new { @class = "form-control", required = "required",data_parsley_required_message = "Please Select Department" })
                                <div class="help-block"></div>
                            </div>
                        </div>*@
                </div>
                <div class="row">
                    <div class="col-lg-4">
                        <label class="form-label">IsActive</label>
                        <div class="form-group">
                            @Html.DropDownListFor(model => model.IsActive, (IEnumerable<SelectListItem>)ViewData["VALIDUSERselectListItems"], new { @class = "form-control", required = "required" })
                        </div>
                    </div>
                    <div class="col-lg-8  text-right">
                        <label class="form-label">&nbsp;</label>
                        <div class="form-group">
                            <input id="btnSaveUser" type="submit" value="Update" class="btn btn-success btn-creat" />
                        </div>
                    </div>

                </div>
             
                @*</form>*@
                <hr />
                <div class="row">
                    <div class="col-lg-4">
                        <label>Reset Password</label>
                        <div class="form-group">
                            <div class="input-group">
                                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", placeholder = "New Password", minlength = "6", data_parsley_required_message = "Please Enter Password" } })
                                <span class="input-group-btn">
                                    <a id="ResetPassword" href="javascript:void(0);" class="btn btn-primary" onclick="getPasswordResetConfirmation();">Reset</a>
                                </span>
                            </div>
                            <div class="help-block"></div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </section>
</div>

<input type="hidden" id="hfUserRoles" value="@string.Join(",", Model.UserRoles.ToList())" />
@section scripts {

    <script type="text/javascript">
        $(document).ready(function () {
            $('#btnSaveUser').on('click', function () {
                $('form#editUser').parsley(parsleyConfig).validate();
            });

            $('#btnSaveUser').on('click', function (e) {
                e.preventDefault();
                var isValid = $('#editUser').parsley(parsleyConfig).validate();
                if (isValid) {
                    var UserId = $('#uID').val();
                    var UserCode = $('#UserCode').val();
                    var Username = $('#Username').val();
                    var Name = $('#Name').val();
                    var Email = $('#Email').val();
                    var Mobile = $('#Mobile').val();
                    var Role = $('#Role').val();
                    //var Department = $('#Department').val();
                    var IsActive = $('#IsActive').val();

                    //var ipOtherContactNo = $('#OtherContactNo');
                    //var ipOtherEmailId = $('#OtherEmailId');
                    //var ipFatherName = $('#FatherName');
                    //var ipFatherContact = $('#FatherContact');
                    //var ipMotherName = $('#MotherName');
                    //var ipMotherContact = $('#MotherContact');
                    //var ipLocalGuardian = $('#LocalGuardian');
                    //var ipLocalGuardianContact = $('#LocalGuardianContact');
                    //var ipResidentialAddress = $('#ResidentialAddress');
                    //var ipHostelAddress = $('#HostelAddress');



                     var key = CryptoJS.enc.Utf8.parse('8080808080808080');
                     var iv = CryptoJS.enc.Utf8.parse('8080808080808080');

                    var UserCode = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(UserCode), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();
                    var Username = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(Username), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();
                    //var Password = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(Password), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();
                    var Name = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(Name), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();
                    var Email = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(Email), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();
                    var Mobile = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(Mobile), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();
                    var Role = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(Role), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();
                    var IsActive = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(IsActive), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();

                    //var Department = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(Department), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();
                    //var OtherContactNo = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(OtherContactNo), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();
                    //var OtherEmailId = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(OtherEmailId), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();
                    //var FatherName = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(FatherName), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();
                    //var FatherContact = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(FatherContact), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();
                    //var MotherContact = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(MotherContact), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();
                    //var MotherName = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(MotherName), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();
                    //var LocalGuardian = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(LocalGuardian), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();
                    //var LocalGuardianContact = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(LocalGuardianContact), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();
                    //var ResidentialAddress = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(ResidentialAddress), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();
                    //var HostelAddress = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(HostelAddress), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();


                     var UserData = {
                         UserId, UserCode, Name, Username, Email, Mobile, Role, IsActive
                    };


                    $.ajax({
                        type: 'POST',
                        contentType: 'application/json; charset=utf-8',
                        url: '@Url.Action("EditUser", "SuperAdmin")',
                        data: JSON.stringify(UserData),
                        dataType: 'json',
                        success: function (data) {
                            if (data.IsSuccessful) {
                                showSweetAlert('success', 'Success', data.Message, 5000);
                            } else {
                                showSweetAlert('error', 'Error', data.Message, 5000);
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            showSweetAlert('error', 'Error', errorThrown, 5000);
                        }
                    });
                }
            });



        });
        function getPasswordResetConfirmation() {
            var userId = $('#uID').val();
            var $password = $('#Password');
            var _password = $password.val().trim();
            if (_password.length == 0) {
                $password.removeClass('parsley-success').addClass('parsley-error');
                $password.closest('.form-group').find('.help-block').addClass('text-danger').html('Password is required');
            }
            else if (_password.length > 0 && _password.length <= 5) {
                $password.removeClass('parsley-success').addClass('parsley-error');
                $password.closest('.form-group').find('.help-block').addClass('text-danger').html('Password is too short');
            }
            else {
                if (checkPassword(_password)) {
                    $password.removeClass('parsley-error').addClass('parsley-success');
                    $password.closest('.form-group').find('.help-block').removeClass('text-danger').html('');
                    var retVal = confirm("Do you really want to reset password for this User?");
                    if (retVal == true) {

                        var key = CryptoJS.enc.Utf8.parse('8080808080808080');
                        var iv = CryptoJS.enc.Utf8.parse('8080808080808080');
                        var Password = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse($password.val().trim()), key, { keySize: 128 / 8, iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }).toString();


                        $.ajax({
                            type: 'POST',
                            contentType: 'application/json; charset=utf-8',
                            url: '@Url.Action("ResetPassword", "SuperAdmin")',
                            data: "{ 'userId': '" + userId + "', 'password': '" + Password + "' }",
                            dataType: 'json',
                            success: function (data) {
                                if (data.IsSuccessful) {
                                    showSweetAlert('success', 'Success', data.Message, 5000);
                                } else {
                                    showSweetAlert('error', 'Error', data.Message, 5000);
                                }
                            },
                            error: function (XMLHttpRequest, textStatus, errorThrown) {
                                showSweetAlert('error', 'Error', errorThrown, 5000);
                            }
                        });
                    } else {
                        return false;
                    }
                } else {
                    $password.removeClass('parsley-success').addClass('parsley-error');
                    $password.closest('.form-group').find('.help-block').addClass('text-danger').html('Invalid Password');
                }
            }
        }
        function checkPassword(str) {
                // at least six characters that are letters, numbers or the underscore
                var re = /^\w([a-zA-Z0-9@@]){6,20}$/;
                return re.test(str);
            }

        $('.ddlRole').select2();
    </script>

}
